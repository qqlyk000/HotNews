    功能：
        注册
    实现:
        1. 用户名合法性检测（长度，敏感词，重复，特殊字符）
        2. 密码长度要求
        3. 密码salt加密，密码强度检测（md5库）
        4. 用户邮件/短信激活

    功能:
        登陆/登出
    实现:
        登陆：
        1.服务器密码校验/三方校验回调，token登记
            1.1服务器端ticket关联userid
            1.2客户端存储ticket(app存储本地，浏览器存储cookie)
        2.服务端/客户端ticket有效期设置（记住登陆）
            注:ticket可以是sessionid，或者是cookie里的一个key
        登出：
            服务端/客户端token删除
            session清理

    功能:
        页面访问
    实现:
        1. 客户端：
            带ticket的HTTP请求
        2. 服务端：
            1. 根据ticket获取用户id
            2. 根据用户id获取用户的具体信息
            3. 用户和页面访问权限处理
            4. 渲染页面/跳转页面

    功能:
        用户数据安全性
    实现：
        1. HTTPS注册页
        2. 公钥加密私钥解密，支付宝h5页面的支付密码加密
        3. 用户密码salt防止破解（CSDN，网易邮箱未加密密码泄漏）
        4. ticket有效期
        5. 单一平台的单点登陆，登陆IP异常检验
        6. 用户状态的权限判断
        7. 添加验证码机制，防止爆破和批量注册

    功能:
        文件上传
    实现：
        1.获取用户上传的文件(二进制数据)
        2.判断文件类型是否合格
        3.将获取文件的stream流改名并复制到本地仓库位置中，保存在本地的文件名使用随机生成
        4.判断是否已存在同名文件(一般不会有),若有则替换该文件
        5.返回文件链接给前端

    功能:
        图片展示
    实现:
        1.找到仓库中的图片流
        2.复制该图片流
        3.放入response响应包中
        4.通过response发回给浏览器

    功能：
        将文件保存在云服务(阿里云，七牛云)
    实现:
        1.引入配置文件
        2.查看官方文档

    功能：
        使用云服务实时缩图
    实现：
        1.阿里云
        http://images.nowcoder.com/images/20150205/60_1423125965233_60_1423125960758_%E7
        %AE%A1%E7%90%86%E5%91%98%E5%A4%B4%E5%83%8F.png@0e_100w_100h_0c_1i_1o_9 0Q_1x.png
        #  @0e_100w_100h    可修改图片尺寸宽度和高度

        2.七牛云
        http://7xsetu.com1.z0.glb.clouddn.com/300_300.png?imageView2/1/w/100/h/100/
        #   w/100/h/100/  修改图片尺寸宽度和高度
        图片基本处理文档:
            http://developer.qiniu.com/code/v6/api/kodo-api/image/imageview2.html
    优点：
        灵活，降低冗余，统一管理

    功能:
        通用新模块的开发流程
    实现:
        1. Database Column。                 首先确定数据库字段
        2. Model：模型定义，和数据库相匹配       然后根据数据库创建这个模型(对象)
        3. DAO：数据读取。                     然后创建访问数据库的模型(类)
        4. Service：服务包装。                 拿出数据，进行复杂逻辑操作
        5. Controller：业务入口。              创建控制器。用作入口或者出口
        6. Test                              上线前的测试

    功能:
        消息中心分组、排序。和每个人的消息分别划成一组，并只显示最新的一条消息。
    实现:
        #查询所有信息
        SELECT * FROM message;
        #查询某用户有关的所有信息(收到和发出)，并按倒叙排序(最新的在最上面)
        SELECT * FROM message where from_id=12 or to_id=12 order by id desc;
        #查询与每个人相关的消息列表(倒叙)，只与每个人消息中最新的显示一条，并且显示消息数量。
        SELECT *, count(id) as cnt from
            (SELECT * FROM message where from_id=12 or to_id=12 order by id desc) tt
        group by conversation_id order by id desc;

    功能：
        Redis
    应用:
        PV
        点赞
        关注
        排行榜
        验证码
        缓存
        异步队列
        判题队列

    功能：
        队列实现异步
    实现:

    功能:
        邮件发送
    实现：
        1. 导包或maven添加配置引入mail库
        2. 创建MailSender Service
        3. 邮箱使用SMTP服务
        4. 设置邮箱信息
        5. 设置邮件信息(渲染模板引擎)

    功能:
        排序相关:
            1.通用排序
                1. 单位时间内的交互数，del.icio.us按1小时内收藏排行
                2. 总交互数，按总点赞数
                3. 评论数加权
                4. 按时间排序
            2.Hacker News
                Score=（P-1）/（T+2）G
                P：投票数，-1是把自己投的过滤掉
                T：发布到现在的时间间隔，单位小时，+2防止除数太小
                G：重力加速度，分值根据时间降低速率
            3.Reddit
                t = (time of entry post) - (Dec 8, 2005)
                x = upvotes - downvotes

                y = {1 if x > 0, 0 if x = 0, -1 if x < 0)
                z = {1 if x < 0, otherwise x}

                log(z) + (y * t)/45000
                时间是最重要的权重，由于流量比较大，所以 对于高赞文章有所优势，适合新闻类排序
                https://medium.com/hacking-and-gonzo/how-reddit-ranking-algorithms-work-ef111e33d0d9
            4.StackOverflow
                (log(Qviews)*4) + ((Qanswers * Qscore)/5) + sum(Ascores)
                --------------------------------------------------------
                ((QageInHours+1) - ((QageInHours - Qupdated)/2)) ^ 1.5

                Qviews：问题浏览数，通过log来平滑
                Qanswer：问题回答数，有回答的题目才是好问题
                Qscore：问题赞踩差，赞的越多，问题越好 sum（Ascores）：回答赞踩差，回答的越多问题越好
                QageInHours：题目发布时间差，时间越久排名越后
                Qupdated：最新的回答时间，越新关注度越高
                https://meta.stackexchange.com/questions/11602/what-formula-should-be-used-to-determine-hot-questions
            5.IMDB
                加权排名 (WR) = (v ÷ (v+m)) × R + (m ÷ (v+m)) × C
                R = 某电影投票平均分
                v = 有效投票人数
                m = 最低投票人数，1250
                C = 所有电影平均值
                投票人数越多，越偏向于用户打分值，防止冷门电影小数人高分导致的高分

    功能：
        单元测试
    实现：
        1. 初始化数据
        2. 执行要测试的业务
        3. 验证测试的数据
        4. 清理数据

    功能：
        打包部署
    实现:
        1. application 继承 SpringBootServletInitializer
        2. pom.xml 打包改为war
        3. mvn package -Dmaven.test.skip=true
        4. 去除多余的main函数

    功能:
        产品功能扩展
    实现:
        1. 用户注册，邮箱激活流程
        2. 站内信互发
        3. 首页滚动到底部自动加载更多
        4. 管理员后台管理
        5. 运营推荐置顶
        6. 广告推广（smzdm.com）
        7. SNS关注，个性化首页

    功能:
        技术深度扩展
    实现:
        1. 自定义排序
        2. 缩图服务
        3. 爬虫自动填充资讯
        4. 个性化推荐







